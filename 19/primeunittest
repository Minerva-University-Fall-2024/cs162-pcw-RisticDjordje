# test_prime_library.py

import unittest
from primetest import is_prime_deterministic, is_prime_probabilistic, find_next_prime

class TestPrimeLibrary(unittest.TestCase):

    def test_is_prime_deterministic(self):
        self.assertTrue(is_prime_deterministic(5), msg="5 should be prime (deterministic).")
        self.assertFalse(is_prime_deterministic(4), msg="4 should not be prime (deterministic).")
        self.assertFalse(is_prime_deterministic(0), msg="0 should not be prime (deterministic).")
        self.assertFalse(is_prime_deterministic(1), msg="1 should not be prime (deterministic).")
        self.assertTrue(is_prime_deterministic(2), msg="2 should be prime (deterministic).")
        self.assertTrue(is_prime_deterministic(17), msg="17 should be prime (deterministic).")

    def test_is_prime_probabilistic(self):
        self.assertTrue(is_prime_probabilistic(5), msg="5 should be prime (probabilistic).")
        self.assertFalse(is_prime_probabilistic(4), msg="4 should not be prime (probabilistic).")
        self.assertFalse(is_prime_probabilistic(0), msg="0 should not be prime (probabilistic).")
        self.assertFalse(is_prime_probabilistic(1), msg="1 should not be prime (probabilistic).")
        self.assertTrue(is_prime_probabilistic(2), msg="2 should be prime (probabilistic).")
        self.assertTrue(is_prime_probabilistic(17), msg="17 should be prime (probabilistic).")


    def test_find_next_prime(self):
        self.assertEqual(find_next_prime(5), 7, msg="Next prime after 5 should be 7.")
        self.assertEqual(find_next_prime(8), 11, msg="Next prime after 8 should be 11.")

        # Test for negative input
        with self.assertRaises(ValueError, msg="Negative input should raise ValueError."):
            find_next_prime(-5)
        
        # Test for string input
        with self.assertRaises(ValueError, msg="String input should raise ValueError."):
            find_next_prime("ten")
        
if __name__ == '__main__':
    unittest.main()
